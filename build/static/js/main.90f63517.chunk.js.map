{"version":3,"sources":["components/NavBar.jsx","components/About.jsx","components/RecentTrans.jsx","components/Chart.jsx","api.js","pages/Landing.jsx","pages/Address.jsx","pages/Transactions.jsx","pages/Testing.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavBar","this","props","page","document","getElementById","classList","add","className","to","id","Component","About","href","Transactions","map_transactions","transactions","BTC_EXCHANGE","ETH_EXCHANGE","formatted_date","time","substring","length","split","join","USD","coin","value","toFixed","key","tx_hash","address","update_transactions","recent","temp","slice","map","setState","TransDiv","state","prevProps","view_all","LineGraph","chartRef","React","createRef","console","log","myChartRef","current","getContext","Chart","defaults","global","elements","line","tension","type","data","labels","SERIES","datasets","label","DATA","borderColor","options","responsive","maintainAspectRatio","ref","fetch","mode","then","response","json","bpi","rate_float","catch","err","parseFloat","result","ethusd","GET_BTC","MAP_BTC","txrefs","confirmed","balance","final_balance","GET_ETH","MAP_ETH","Landing","update","BTC","i","all_transactions","TRANSACTIONS","BTC_TRANSACTIONS","push","BTC_BALANCE","TRANACTIONS","sort","a","b","error","ETH","ETH_TRANSACTIONS","ETH_BALANCE","refresh","setInterval","BTC_USD","ETH_USD","GRAPH_DATA","wallet","wallets","date","balances","clearInterval","Address","map_address","note","addresses","QRCode","toCanvas","scale","Testing","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90f63517.chunk.js","sourcesContent":["// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Importing Styles\r\nimport './NavBar.css';\r\n\r\nclass NavBar extends Component {\r\n\tcomponentDidMount() {\r\n\t\tswitch (this.props.page) {\r\n\t\t\tcase 'Dashboard':\r\n\t\t\t\tdocument.getElementById('Dashboard').classList.add('underline');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Address':\r\n\t\t\t\tdocument.getElementById('Address').classList.add('underline');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Transactions':\r\n\t\t\t\tdocument\r\n\t\t\t\t\t.getElementById('Transactions')\r\n\t\t\t\t\t.classList.add('underline');\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"NavBar\">\r\n\t\t\t\t<div className=\"nav_item\">\r\n\t\t\t\t\t<Link to=\"/\" id=\"Dashboard\">\r\n\t\t\t\t\t\tDashboard\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"nav_item\">\r\n\t\t\t\t\t<Link to=\"/address\" id=\"Address\">\r\n\t\t\t\t\t\tAddress\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"nav_item\">\r\n\t\t\t\t\t<Link to=\"/transactions\" id=\"Transactions\">\r\n\t\t\t\t\t\tTransactions\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr className=\"nav_line\" />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NavBar;\r\n","// Importing Dependencies\r\nimport React from 'react';\r\n\r\n// Importing Styles\r\nimport './About.css';\r\n\r\nconst About = props => {\r\n    return (\r\n        <div className=\"about\">\r\n            <div className=\"sub_title\">\r\n                About:\r\n            </div>\r\n            <br/>\r\n            <p>This project is open to community improvement. Check out the repo at <a id=\"github_link\" href=\"https://github.com/tylermaran/nbcrypto\">github.com/tylermaran/nbcrypto</a></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Importing Styles\r\nimport './RecentTrans.css';\r\n\r\nclass Transactions extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tTransDiv: '',\r\n\t\t};\r\n\t}\r\n\r\n\tmap_transactions = transactions => {\r\n\t\tlet BTC_EXCHANGE = this.props.BTC_EXCHANGE;\r\n\t\tlet ETH_EXCHANGE = this.props.ETH_EXCHANGE;\r\n\r\n\t\tlet formatted_date = transactions.time\r\n\t\t\t.substring(0, transactions.time.length - 1)\r\n\t\t\t.split('T')\r\n\t\t\t.join(' : ');\r\n\r\n\t\tlet USD = 0;\r\n\t\tswitch (transactions.coin) {\r\n\t\t\tcase 'BTC':\r\n\t\t\t\tUSD = (transactions.value * BTC_EXCHANGE).toFixed(2);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ETH':\r\n\t\t\t\tUSD = (transactions.value * ETH_EXCHANGE).toFixed(2);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"transaction_div\" key={transactions.tx_hash}>\r\n\t\t\t\t<div className=\"account_number\">{transactions.address}</div>\r\n\t\t\t\t<div className=\"transaction_coin\">{transactions.coin}</div>\r\n\t\t\t\t<div className=\"transaction_value\">\r\n\t\t\t\t\t{' '}\r\n\t\t\t\t\t{transactions.value.toFixed(6)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"transaction_time\">{formatted_date}</div>\r\n\t\t\t\t<div className=\"transaction_usd\"> $ {USD}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tupdate_transactions = (transactions, recent) => {\r\n\t\tif (recent === true) {\r\n\t\t\tlet short_list = transactions.slice(0, 9);\r\n\t\t\tlet temp = short_list.map(this.map_transactions);\r\n\t\t\tthis.setState({\r\n\t\t\t\tTransDiv: temp,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tlet temp = transactions.map(this.map_transactions);\r\n\t\t\tthis.setState({\r\n\t\t\t\tTransDiv: temp,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount(prevProps) {\r\n\t\tthis.update_transactions(this.props.transactions, this.props.recent);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tif (this.props !== prevProps) {\r\n\t\t\tthis.update_transactions(\r\n\t\t\t\tthis.props.transactions,\r\n\t\t\t\tthis.props.recent\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet view_all = (\r\n\t\t\t<div className=\"view_all\">\r\n\t\t\t\t<Link to=\"/transactions\">View all transactions</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"RecentTrans\">\r\n\t\t\t\t<div className=\"sub_title\">Recent Transactions:</div>\r\n\t\t\t\t{this.state.TransDiv}\r\n\t\t\t\t{this.props.recent ? view_all : <></>}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Transactions;\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nimport './Chart.css';\r\n\r\nclass LineGraph extends Component {\r\n    \r\n\tchartRef = React.createRef();\r\n\r\n\tcomponentDidUpdate() {\r\n        console.log(this.props)\r\n\t\tconst myChartRef = this.chartRef.current.getContext('2d');\r\n\t\tChart.defaults.global.elements.line.tension = 0;\r\n\r\n\t\tnew Chart(myChartRef, {\r\n\t\t\ttype: 'line',\r\n\t\t\tdata: {\r\n\t\t\t\t//Bring in data\r\n\t\t\t\tlabels: this.props.data.SERIES,\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlabel: 'TOTAL',\r\n                        data: this.props.data.DATA,\r\n                        borderColor: \"#98B9AB\"\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\toptions: { responsive: true, maintainAspectRatio: false },\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"chart_outer\">\r\n\t\t\t\t<canvas id=\"chart_container\" ref={this.chartRef} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LineGraph;\r\n","const BTC_URL = 'https://api.blockcypher.com/v1/btc/main/addrs/';\r\nconst ETH_URL = 'https://api.blockcypher.com/v1/eth/main/addrs/';\r\nconst BTC_EXCHANGE_URL = 'https://api.coindesk.com/v1/bpi/currentprice.json';\r\nconst ETH_EXCHANGE_URL = 'https://api.etherscan.io/api?module=stats&action=ethprice';\r\n\r\n// BTC Exchange\r\nconst BTC_EXCHANGE = () => {\r\n\t// BTC Exchange Rate\r\n\treturn fetch(BTC_EXCHANGE_URL, {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(data => {\r\n\t\t\tlet result = data.bpi.USD.rate_float.toFixed(2);\r\n\t\t\treturn result;\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log('Error Fetching BTC exchange rate');\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n};\r\n\r\n// ETH Exchange\r\nconst ETH_EXCHANGE = () => {\r\n\t// ETH Exchange Rate\r\n\treturn fetch(ETH_EXCHANGE_URL, {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(data => {\r\n\t\t\tlet result = parseFloat(data.result.ethusd).toFixed(2);\r\n\t\t\treturn result;\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log('Error Fetching ETH exchange rate');\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n};\r\n\r\n// GET BTC\r\nconst GET_BTC = (address) => {\r\n\tconst MAP_BTC = txrefs => {\r\n\t\tlet value = parseFloat(txrefs.value) / 100000000;\r\n\r\n\t\treturn {\r\n\t\t\tcoin: 'BTC',\r\n\t\t\ttx_hash: txrefs.tx_hash,\r\n\t\t\taddress: address,\r\n\t\t\tvalue: value,\r\n\t\t\ttime: txrefs.confirmed,\r\n\t\t};\r\n\t};\r\n\r\n\treturn fetch(BTC_URL + address, {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(data => {\r\n\t\t\tlet transactions = data.txrefs.map(MAP_BTC);\r\n\t\t\tlet balance = parseFloat(data.final_balance) / 100000000;\r\n\t\t\tlet result = {\r\n\t\t\t\ttransactions: transactions,\r\n\t\t\t\tbalance: balance,\r\n\t\t\t};\r\n\r\n\t\t\treturn result;\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log('Error Fetching BTC');\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n};\r\n\r\n// GET ETH\r\nconst GET_ETH = (address) => {\r\n\tconst MAP_ETH = txrefs => {\r\n\t\tlet value = parseFloat(txrefs.value) / 1000000000000000000;\r\n\r\n\t\treturn {\r\n\t\t\tcoin: 'ETH',\r\n\t\t\ttx_hash: txrefs.tx_hash,\r\n\t\t\taddress: address,\r\n\t\t\tvalue: value,\r\n\t\t\ttime: txrefs.confirmed,\r\n\t\t};\r\n\t};\r\n\r\n\treturn fetch(ETH_URL + address, {\r\n\t\tmode: 'cors', // no-cors, *cors, same-origin\r\n\t})\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(data => {\r\n\t\t\tlet transactions = data.txrefs.map(MAP_ETH);\r\n\t\t\tlet balance = parseFloat(data.final_balance) / 1000000000000000000;\r\n\t\t\tlet result = {\r\n\t\t\t\ttransactions: transactions,\r\n\t\t\t\tbalance: balance,\r\n\t\t\t};\r\n\r\n\t\t\treturn result;\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log('Error Fetching ETH balance');\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n};\r\n\r\nexport { BTC_EXCHANGE, ETH_EXCHANGE, GET_BTC, GET_ETH };\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Importing Components\r\nimport NavBar from '../components/NavBar';\r\nimport About from '../components/About';\r\nimport RecentTrans from '../components/RecentTrans';\r\nimport Chart from '../components/Chart';\r\n\r\n// Importing Styling\r\nimport './Landing.css';\r\n\r\nimport { BTC_EXCHANGE, ETH_EXCHANGE, GET_BTC, GET_ETH } from '../api';\r\n\r\n// Importing Wallets\r\nimport wallet from '../wallets.json';\r\nimport balances from '../balance.json';\r\n\r\n// Coinbase account: ignoring this one for now\r\n// {\r\n// \t\"coin\": \"BTC\",\r\n// \t\"address\": \"1NrbWrxkdPuyPfFtc1W4AKNtkQMyXwAAJV\",\r\n// \t\"note\": \"Bitcoin Coinbase Account (cold-storage)\"\r\n// }\r\n\r\nclass Landing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            BTC: [],\r\n            ETH: [],\r\n            BTC_EXCHANGE: 0,\r\n            ETH_EXCHANGE: 0,\r\n            BTC_BALANCE: 0,\r\n            ETH_BALANCE: 0,\r\n            BTC_USD: 0,\r\n            ETH_USD: 0,\r\n            TRANSACTIONS: [],\r\n            ETH_TRANSACTIONS: [],\r\n            BTC_TRANSACTIONS: [],\r\n            GRAPH_DATA: {\r\n                DATA: [],\r\n                SERIES: [],\r\n            },\r\n        };\r\n    }\r\n    update = () => {\r\n        BTC_EXCHANGE().then(response => {\r\n            console.log('BTC Exchange Rate: ' + response);\r\n            this.setState({\r\n                BTC_EXCHANGE: response,\r\n            });\r\n        });\r\n\r\n        ETH_EXCHANGE().then(response => {\r\n            console.log('ETH Exchange Rate: ' + response);\r\n            this.setState({\r\n                ETH_EXCHANGE: response,\r\n            });\r\n        });\r\n\r\n        if (this.state.BTC.length > 0) {\r\n            for (let i = 0; i < this.state.BTC.length; i++) {\r\n                GET_BTC(this.state.BTC[i])\r\n                    .then(response => {\r\n                        let all_transactions = this.state.TRANSACTIONS;\r\n\r\n                        if (\r\n                            response.transactions.length >\r\n                            this.state.BTC_TRANSACTIONS\r\n                        ) {\r\n                            for (\r\n                                let i = 0;\r\n                                i < response.transactions.length;\r\n                                i++\r\n                            ) {\r\n                                all_transactions.push(response.transactions[i]);\r\n                            }\r\n                            this.setState(\r\n                                {\r\n                                    BTC_BALANCE: response.balance,\r\n                                    TRANACTIONS: all_transactions,\r\n                                    BTC_TRANSACTIONS: response.transactions,\r\n                                },\r\n                                () => {\r\n                                    let temp = this.state.TRANSACTIONS;\r\n                                    temp.sort((a, b) =>\r\n                                        a.time > b.time ? -1 : 1\r\n                                    );\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Error Fetching BTC Balance');\r\n                        console.log(error);\r\n                    });\r\n            }\r\n        }\r\n\r\n        if (this.state.ETH.length > 0) {\r\n            for (let i = 0; i < this.state.BTC.length; i++) {\r\n                GET_ETH(this.state.ETH[i])\r\n                    .then(response => {\r\n                        let all_transactions = this.state.TRANSACTIONS;\r\n\r\n                        if (\r\n                            response.transactions.length >\r\n                            this.state.ETH_TRANSACTIONS\r\n                        ) {\r\n                            for (\r\n                                let i = 0;\r\n                                i < response.transactions.length;\r\n                                i++\r\n                            ) {\r\n                                all_transactions.push(response.transactions[i]);\r\n                            }\r\n                            this.setState(\r\n                                {\r\n                                    ETH_BALANCE: response.balance,\r\n                                    TRANACTIONS: all_transactions,\r\n                                    ETH_TRANSACTIONS: response.transactions,\r\n                                },\r\n                                () => {\r\n                                    let temp = this.state.TRANSACTIONS;\r\n                                    temp.sort((a, b) =>\r\n                                        a.time > b.time ? -1 : 1\r\n                                    );\r\n                                }\r\n                            );\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Error Fetching ETH Balance');\r\n                        console.log(error);\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    // Update the balance every minute\r\n    refresh = setInterval(this.update, 60000);\r\n\r\n    componentDidMount() {\r\n        for (let i = 0; i < wallet.wallets.length; i++) {\r\n            let temp;\r\n            switch (wallet.wallets[i].coin) {\r\n                case 'ETH':\r\n                    temp = this.state.ETH;\r\n                    temp.push(wallet.wallets[i].address);\r\n                    this.setState({\r\n                        ETH: temp,\r\n                    });\r\n                    break;\r\n                case 'BTC':\r\n                    temp = this.state.BTC;\r\n                    temp.push(wallet.wallets[i].address);\r\n                    this.setState({\r\n                        BTC: temp,\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        this.update();\r\n\r\n        let date = [];\r\n        let balance = [];\r\n        for (let i = 0; i < balances.length; i++) {\r\n            date.push(balances[i].date);\r\n            balance.push(balances[i].balance);\r\n        }\r\n        console.log(date, balance);\r\n        let temp = {\r\n            SERIES: date,\r\n            DATA: balance,\r\n        };\r\n        this.setState({\r\n            GRAPH_DATA: temp,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refresh);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"landing\">\r\n                <div className=\"grid\">\r\n                    <NavBar page=\"Dashboard\" />\r\n                    <h1 className=\"main_title\">NoiseBridge Crypto</h1>\r\n\r\n                    <div className=\"graph\">\r\n                        <div className=\"sub_title\">Overview:</div>\r\n                        <div className=\"total_balance\">$\r\n                            {(this.state.ETH_BALANCE * this.state.ETH_EXCHANGE +\r\n                                this.state.BTC_BALANCE *\r\n                                    this.state.BTC_EXCHANGE).toFixed(2)}\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <Chart data={this.state.GRAPH_DATA} />\r\n                    </div>\r\n\r\n                    <div className=\"current_balance\">\r\n                        <div className=\"eth\">\r\n                            <div className=\"account_number\">\r\n                                <Link to=\"/address\">{this.state.ETH}</Link>\r\n                            </div>\r\n                            <div className=\"balance\">\r\n                                ETH Balance: {this.state.ETH_BALANCE}{' '}\r\n                            </div>\r\n                            <div className=\"exchange_rate\">\r\n                                ETH Exchange Rate: ${this.state.ETH_EXCHANGE}\r\n                            </div>\r\n                            <div className=\"usd_balance\">\r\n                                ETH (USD): $\r\n                                {(\r\n                                    this.state.ETH_BALANCE *\r\n                                    this.state.ETH_EXCHANGE\r\n                                ).toFixed(2)}{' '}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"btc\">\r\n                            <div className=\"account_number\">\r\n                                <Link to=\"/address\">{this.state.BTC}</Link>\r\n                            </div>\r\n                            <div className=\"raw_balance\">\r\n                                BTC Balance: {this.state.BTC_BALANCE}\r\n                            </div>\r\n                            <div className=\"exchange_rate\">\r\n                                BTC Exchange Rate: ${this.state.BTC_EXCHANGE}\r\n                            </div>\r\n                            <div className=\"usd_balance\">\r\n                                BTC (USD): $\r\n                                {(\r\n                                    this.state.BTC_BALANCE *\r\n                                    this.state.BTC_EXCHANGE\r\n                                ).toFixed(2)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <RecentTrans\r\n                        transactions={this.state.BTC_TRANSACTIONS}\r\n                        recent={true}\r\n                        BTC_EXCHANGE={this.state.BTC_EXCHANGE}\r\n                        ETH_EXCHANGE={this.state.ETH_EXCHANGE}\r\n                    />\r\n                    <About />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\nimport QRCode from 'qrcode';\r\n\r\n// Importing Components\r\nimport NavBar from '../components/NavBar';\r\n\r\n// Importing Styles\r\nimport './Address.css';\r\n\r\n// Importing Wallets\r\nimport wallets from '../wallets.json';\r\n\r\nclass Address extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\taddresses: '',\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tlet temp = wallets.wallets.map(this.map_address);\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\taddresses: temp,\r\n\t\t\t},\r\n\t\t\t() => {\r\n\r\n\t\t\t\tfor (let i = 0; i < wallets.wallets.length; i++) {\r\n\t\t\t\t\tQRCode.toCanvas(\r\n\t\t\t\t\t\tdocument.getElementById(wallets.wallets[i].address),\r\n\t\t\t\t\t\twallets.wallets[i].address,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tscale: 10,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tfunction(error) {\r\n\t\t\t\t\t\t\tif (error) console.error(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tmap_address = address => {\r\n\t\treturn (\r\n\t\t\t<div className=\"address_container\" key={address.address}>\r\n\t\t\t\t<div className=\"sub_title\">{address.coin} Address:</div>\r\n\t\t\t\t<p className=\"address_note\">{address.address}</p>\r\n\t\t\t\t<canvas\r\n\t\t\t\t\tclassName=\"address_canvas\"\r\n\t\t\t\t\tid={address.address}\r\n\t\t\t\t></canvas>\r\n\t\t\t\t<p className=\"address_note\">{address.note}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Address\">\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t\t<NavBar page=\"Address\" />\r\n\t\t\t\t\t{this.state.addresses}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Address;\r\n","// Importing Dependencies\r\nimport React, { Component } from 'react';\r\n\r\n// Importing Components\r\nimport NavBar from '../components/NavBar';\r\nimport RecentTrans from '../components/RecentTrans';\r\n\r\n// Importing Styles\r\nimport './Transactions.css';\r\n\r\n// Importing formulas\r\nimport { BTC_EXCHANGE, ETH_EXCHANGE, GET_BTC, GET_ETH } from '../api';\r\n\r\n// Importing Wallets\r\nimport wallet from '../wallets.json';\r\n\r\nclass Transactions extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tBTC: [],\r\n\t\t\tETH: [],\r\n\t\t\tBTC_EXCHANGE: 0,\r\n\t\t\tETH_EXCHANGE: 0,\r\n\t\t\tBTC_BALANCE: 0,\r\n\t\t\tETH_BALANCE: 0,\r\n\t\t\tBTC_USD: 0,\r\n\t\t\tETH_USD: 0,\r\n\t\t\tTRANSACTIONS: [],\r\n\t\t\tETH_TRANSACTIONS: [],\r\n\t\t\tBTC_TRANSACTIONS: [],\r\n\t\t};\r\n\t}\r\n\tupdate = () => {\r\n\t\tBTC_EXCHANGE().then(response => {\r\n\t\t\tconsole.log('BTC Exchange Rate: ' + response);\r\n\t\t\tthis.setState({\r\n\t\t\t\tBTC_EXCHANGE: response,\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tETH_EXCHANGE().then(response => {\r\n\t\t\tconsole.log('ETH Exchange Rate: ' + response);\r\n\t\t\tthis.setState({\r\n\t\t\t\tETH_EXCHANGE: response,\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tif (this.state.BTC.length > 0) {\r\n\t\t\tfor (let i = 0; i < this.state.BTC.length; i++) {\r\n\t\t\t\tGET_BTC(this.state.BTC[i])\r\n\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\tlet all_transactions = this.state.TRANSACTIONS;\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tresponse.transactions.length >\r\n\t\t\t\t\t\t\tthis.state.BTC_TRANSACTIONS\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\t\t\t\ti < response.transactions.length;\r\n\t\t\t\t\t\t\t\ti++\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tall_transactions.push(response.transactions[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tBTC_BALANCE: response.balance,\r\n\t\t\t\t\t\t\t\t\tTRANACTIONS: all_transactions,\r\n\t\t\t\t\t\t\t\t\tBTC_TRANSACTIONS: response.transactions,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\t\tlet temp = this.state.TRANSACTIONS;\r\n\t\t\t\t\t\t\t\t\ttemp.sort((a, b) =>\r\n\t\t\t\t\t\t\t\t\t\ta.time > b.time ? -1 : 1\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log('Error Fetching BTC Balance');\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.state.ETH.length > 0) {\r\n\t\t\tfor (let i = 0; i < this.state.BTC.length; i++) {\r\n\t\t\t\tGET_ETH(this.state.ETH[i])\r\n\t\t\t\t\t.then(response => {\r\n\t\t\t\t\t\tlet all_transactions = this.state.TRANSACTIONS;\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tresponse.transactions.length >\r\n\t\t\t\t\t\t\tthis.state.ETH_TRANSACTIONS\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\t\t\t\ti < response.transactions.length;\r\n\t\t\t\t\t\t\t\ti++\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tall_transactions.push(response.transactions[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tETH_BALANCE: response.balance,\r\n\t\t\t\t\t\t\t\t\tTRANACTIONS: all_transactions,\r\n\t\t\t\t\t\t\t\t\tETH_TRANSACTIONS: response.transactions,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\t\tlet temp = this.state.TRANSACTIONS;\r\n\t\t\t\t\t\t\t\t\ttemp.sort((a, b) =>\r\n\t\t\t\t\t\t\t\t\t\ta.time > b.time ? -1 : 1\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log('Error Fetching ETH Balance');\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Update the balance every minute\r\n\trefresh = setInterval(this.update, 60000);\r\n\r\n\tcomponentDidMount() {\r\n\t\tfor (let i = 0; i < wallet.wallets.length; i++) {\r\n\t\t\tlet temp;\r\n\t\t\tswitch (wallet.wallets[i].coin) {\r\n\t\t\t\tcase 'ETH':\r\n\t\t\t\t\ttemp = this.state.ETH;\r\n\t\t\t\t\ttemp.push(wallet.wallets[i].address);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tETH: temp,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'BTC':\r\n\t\t\t\t\ttemp = this.state.BTC;\r\n\t\t\t\t\ttemp.push(wallet.wallets[i].address);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tBTC: temp,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.refresh);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Transactions\">\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t\t<NavBar page=\"Transactions\" />\r\n\t\t\t\t\t<RecentTrans\r\n\t\t\t\t\t\ttransactions={this.state.TRANSACTIONS}\r\n\t\t\t\t\t\trecent={false}\r\n\t\t\t\t\t\tBTC_EXCHANGE={this.state.BTC_EXCHANGE}\r\n\t\t\t\t\t\tETH_EXCHANGE={this.state.ETH_EXCHANGE}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Transactions;\r\n","// Importing Dependencies\r\nimport React from 'react';\r\n\r\n// Importing Components\r\nimport Chart from '../components/Chart';\r\n\r\n// Importing Styling\r\nimport './Testing.css';\r\n\r\nconst Testing = () => {\r\n    return (\r\n        <div className=\"Testing\">\r\n                    <Chart/>\r\n               \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Testing;\r\n","// Importing Dependencies\r\nimport React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n// Importing Components\r\nimport Landing from './pages/Landing';\r\nimport Address from './pages/Address';\r\nimport Transactions from './pages/Transactions';\r\nimport Testing from './pages/Testing'; \r\n\r\n// Importing Styling\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Landing} />\r\n                    <Route exact path=\"/address\" component={Address}/>\r\n                    <Route exact path=\"/transactions\" component={Transactions} />\r\n                    <Route exact path=\"/testing\" component={Testing} />\r\n                    \r\n                    <Route component={Landing} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}